#!/usr/bin/env zsh
compdef _catkin catkin

_catkin(){
	_arguments \
		{-h,--help}'[show this help message and exit]' \
		{-a,--list-aliases}'[Lists the current verb alias]' \
		--version'[Printsthe catkin_tools version.]' \
	'*: :__catkin_modules'
}

__catkin_modules(){
if (( CURRENT == 2));then
  _values \
   'command' \
	'build[Builds a catkin workspace.]'\
	'clean[Deletes various products of the build verb.]'\
	'config[Configures a catkin workspaces context]'\
	'create[Creates catkin workspace resources like packages]'\
	'env[Run an arbitrary command in a modified environment.]'\
	'init[Initializes a given folder as a catkin workspace.]'\
	'list[Lists catkin packages in the workspace or other arbitray folders.]'\
	'locate[Get the paths to various locations in a workspace.]'\
	'profile[Manage config profiles for a catkin workspace.]'
else
	if [ $words[2] = 'create' ];then
		_catkin_create;
	fi
	if [ $words[2] = 'build' ];then
		_catkin_build;
	fi
fi
}

_catkin_create(){
	if (( CURRENT ==3));then
		 _values \
		'sub command' \
		'pkg[Builds a catkin workspace.]' 
	elif ((CURRENT == 5));then
		_arguments \
		--catkin-deps'[Add package dependency.]' \
		'3: :__catkin_modules'
	fi
}

_catkin_build(){
	IFS_BACKUP=$IFS
	IFS=':'
	local ws_path=( `echo ${CMAKE_PREFIX_PATH}` )
	IFS=$IFS_BACKUP
	local rel_path=`echo "${ws_path[1]}/../src/"`
	local abs_path=`readlink -f ${rel_path}`
	local str=()
	for file in `\find "${abs_path}" -maxdepth 1 -type d | grep -v "\/\."`; do
		local tmp=$(basename $file)
		if [ $tmp != 'src' ]; then
			str+=$tmp
		fi
	done
	_values -w 'package' ${str}
	_arguments \
	 --cmake-args'[specify cmake arguments]'\
	 '1:3 :__catkin_modules'
}
